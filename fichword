
public class ConsoleClass{
    private static int direction;

    public static void MachineContreMachine(Echiquier echiquier) {
        while (true) {
            echiquier.randomTurn();
            echiquier.showEchiquier();
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }




    public static void HumanContreHuman( Echiquier echiquier) {
        while (true) {
            System.out.println("saisir votre Commande , joueur  : "+echiquier.getTurn());
            Scanner scanner = new Scanner(System.in);
            String command = scanner.nextLine();

            String[] trait = command.split(",");

            // echiquier.switchPlayer();
            Piece choosenPiece = echiquier.getPieceByLabel(trait[0]);
            if (choosenPiece != null && trait.length == 2) {
                System.out.println("Vous avez choisi : " + choosenPiece);
                System.out.println("Pour faire ce mouvement " + trait[1]);

                if ("h".equals(trait[1])) {
                    direction = 1;
                } else if ("b".equals(trait[1])) {
                    direction = 2;
                } else if ("d".equals(trait[1])) {
                    direction = 3;
                } else if ("g".equals(trait[1])) {
                    direction = 4;
                }
                try {

                    choosenPiece.movePiece(direction, 0);
                } catch (MoveException | NullPointerException e) {
                    System.out.println("Ne peut pas bouger");
                }

            } else {
                System.out.println("On ne peut pas trouvé cette piece ou votre commande est incorrecte");
            }

            echiquier.showEchiquier();
        }
    }

    public static void HumanContreMachine(Echiquier echiquier) {
        while (true) {
            if (echiquier.getTurn() == -1) {
                System.out.println("Saisir votre commande player " + echiquier.getTurn());
                Scanner scanner = new Scanner(System.in);
                String command = scanner.nextLine();

                String[] trait = command.split(",");

                Piece choosenPiece = echiquier.getPieceByLabel(trait[0]);
                if (choosenPiece != null && trait.length == 2) {
                    String move = trait[1];
                    int direction = 0;
                    if ("h".equals(move)) {
                        direction = 1;
                    } else if ("b".equals(move)) {
                        direction = 2;
                    } else if ("d".equals(move)) {
                        direction = 3;
                    } else if ("g".equals(move)) {
                        direction = 4;
                    }

                    try {
                        Point depart = choosenPiece.getPosition();
                        choosenPiece.movePiece(direction, 0);
                        Point arrivee = choosenPiece.getPosition();

                        // Enregistrer le déplacement dans la base de données
                        echiquier.enregistrerDeplacement(choosenPiece, depart, arrivee);
                    } catch (MoveException | NullPointerException e) {
                        System.out.println("Impossible de déplacer la pièce.");
                    }
                } else {
                    System.out.println("Impossible de trouver la pièce ou commande incorrecte.");
                }
            } else {
                // La machine joue
                Piece[] pieces = echiquier.getPieceByTurn().toArray(new Piece[0]);
                Piece choosenPiece = pieces[(int) (Math.random() * pieces.length)];
                int direction = (int) (Math.random() * 4) + 1;

                try {
                    Point depart = choosenPiece.getPosition();
                    choosenPiece.movePiece(direction, 0);
                    Point arrivee = choosenPiece.getPosition();

                    // Enregistrer le déplacement dans la base de données
                    echiquier.enregistrerDeplacement(choosenPiece, depart, arrivee);
                } catch (MoveException | NullPointerException e) {
                    // Si le déplacement est impossible, on en choisit un autre aléatoirement
                    while (true) {
                        choosenPiece = pieces[(int) (Math.random() * pieces.length)];
                        direction = (int) (Math.random() * 4) + 1;
                        try {
                            Point depart = choosenPiece.getPosition();
                            choosenPiece.movePiece(direction, 0);
                            Point arrivee = choosenPiece.getPosition();

                            // Enregistrer le déplacement dans la base de données
                            echiquier.enregistrerDeplacement(choosenPiece, depart, arrivee);

                            break;
                        } catch (MoveException | NullPointerException ex) {
                            // Si le déplacement est encore impossible, on continue la boucle
                        }
                    }
                }
            }
            echiquier.showEchiquier();
        }
    }


    public static void main(String[] args) {

        Echiquier echiquier = Echiquier.getInstance();

        System.out.println("mettre votre choix");
        System.out.println("1-Human VS Human");
        System.out.println("2-Human VS Machine");
        System.out.println("3-Machine VS Machine");
        System.out.println("4-exit");
        int choose=0;
        Scanner sc=new Scanner(System.in);
        choose=sc.nextInt();
        echiquier.showEchiquier();
        System.out.println("Le jeu va commencera dans 5 secondes......\n");

        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        switch (choose) {
            case 1:
                HumanContreHuman(echiquier);
                break;
            case 2:
                HumanContreMachine(echiquier);
                break;
            case 3:
                MachineContreMachine(echiquier);
                break;
            case 4:
                System.exit(0);
                break;
            default:
                break;
        }

    }
}    ceci le code de mon application console de mon jeu je voulais ajouter autre methode machine contre machine via un reseaue connecte et voila les classe pour connecter avec server mais par des messages je voulais connecter avec le jeu c est a dire le joueur va jouer avec autre joueuer via reseau                                                                                                                                                                                                               

import java.net.*;
import java.util.Scanner;


import java.io.*;

public class ClientProg {
	
	
	// initialize socket and input output streams
	private Socket socket = null;

	private ObjectOutputStream out;

	private ObjectInputStream in;

	private static ClientProg instance;

	// constructor to put ip address and port
	private ClientProg(String address, int port) {

		try {

			socket = new Socket(address, port);

			// sends output to the socket
			out = new ObjectOutputStream(socket.getOutputStream());
			in = new ObjectInputStream(socket.getInputStream());

			System.out.println("Connected to server");

		} catch (Exception ex) {
			throw new NetworkException(ex);
		}

	}

	public static ClientProg getConnnection(String pIpAdress, int port) {

		if (instance == null) {
			instance = new ClientProg(pIpAdress, port);

		}

		return instance;

	}

	public void close() {
		try {
			out.writeObject("end_connection");
			out.flush();
			out.close();
			in.close();
			socket.close();
		} catch (Exception ex) {
			throw new NetworkException(ex);
		}
	}

	public Object send(String pMessage) {

		Object obj;
		try {

			out.writeObject(pMessage);
			out.flush();
			obj = in.readObject();

		} catch (Exception ex) {
			throw new NetworkException(ex);
		}
		return obj;
	}

	public static void main(String args[]) {
		

		Scanner sc = new Scanner(System.in);
		System.out.println("please entrer the network IP Adresse of the server number (for localhost the ip adresse is: 127.0.0.1)");
		String ipAdresse =  sc.next().trim();
		System.out.println("please entrer the network port number user by the server (Example: 5000)");
		int port  = sc.nextInt();

		//connect to server
		ClientProg client = ClientProg.getConnnection(ipAdresse, port);		
		Scanner s = new Scanner(System.in);
		while (true) {
			System.out.println("Pleaser write your message:");
			//read message
			String line = s.nextLine();
			//send message
			Object rep = client.send(line);
			//print server response
			System.out.println(rep);

		}

	}
}
